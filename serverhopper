if not game:IsLoaded() then game.Loaded:Wait() end

local EXCLUSION_RADIUS = 20
local MAX_PLAYERS_FOR_TP = 8
local CHECK_INTERVAL = 5

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local lp = Players.LocalPlayer
local placeId = game.PlaceId
local jobId = game.JobId

local webhookMessages = {
    "âœ… {secret} has been caught lacking in {owner}'s base (Server: {jobId}), get it while you can.",
    "{secret} really thought they could hide in {owner}'s base (Server: {jobId})...",
    "We found {secret} sleeping in {owner}'s base! (Server: {jobId})",
    "ðŸš¨ {secret} spotted in {owner}'s server! (JobID: {jobId})",
    "Free {secret} in {owner}'s base right now! (Server: {jobId})",
    "A wild {secret} has been found in {owner}'s base! (Server: {jobId})"
}

local function getPlotOwner(plot)
    if not plot then return "Unknown" end
    local sign = plot:FindFirstChild("PlotSign")
    if not sign then return "Unknown" end
    local surfaceGui = sign:FindFirstChildWhichIsA("SurfaceGui")
    if not surfaceGui then return "Unknown" end
    local frame = surfaceGui:FindFirstChild("Frame") or surfaceGui:FindFirstChildWhichIsA("Frame")
    if not frame then return "Unknown" end
    local textLabel = frame:FindFirstChild("TextLabel") or frame:FindFirstChildWhichIsA("TextLabel")
    if not textLabel or not textLabel.Text then return "Unknown" end
    
    local cleanText = textLabel.Text
        :gsub("\n", " ")
        :gsub("%s+", " ")
        :gsub("'s [Pp]lot", "")
        :gsub("'s [Bb]ase", "")
        :match("^%s*(.-)%s*$")
    
    return cleanText ~= "" and cleanText or "Unknown"
end

local myBase
for _, plot in pairs(workspace.Plots:GetChildren()) do
    local sign = plot:FindFirstChild("PlotSign")
    if sign and sign:FindFirstChild("SurfaceGui") then
        local frame = sign.SurfaceGui:FindFirstChild("Frame")
        if frame and frame:FindFirstChild("TextLabel") then
            if frame.TextLabel.Text:find(lp.DisplayName) then
                myBase = plot
                break
            end
        end
    end
end

local function getClosestPlot(position)
    local closestPlot, minDistance = nil, math.huge
    for _, plot in pairs(workspace.Plots:GetChildren()) do
        if plot:FindFirstChild("DeliveryHitbox") then
            local distance = (position - plot.DeliveryHitbox.Position).Magnitude
            if distance < minDistance then
                closestPlot = plot
                minDistance = distance
            end
        end
    end
    return closestPlot
end

local function getPlayerDistance(position)
    if lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        return math.floor((lp.Character.HumanoidRootPart.Position - position).Magnitude)
    end
    return "N/A"
end

local function sendToWebhook(url, secretName, secretPosition)
    local closestPlot = getClosestPlot(secretPosition)
    local owner = closestPlot and getPlotOwner(closestPlot) or "Unknown"
    local distance = getPlayerDistance(secretPosition)
    
    local randomMessage = webhookMessages[math.random(#webhookMessages)]
        :gsub("{secret}", secretName)
        :gsub("{owner}", owner)
        :gsub("{jobId}", jobId)

    local data = {
        ["embeds"] = {{
            ["title"] = "ðŸŽ¯ Arvion Hub Secret Found!",
            ["description"] = randomMessage,
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "Owner",
                    ["value"] = owner,
                    ["inline"] = true
                },
                {
                    ["name"] = "Distance",
                    ["value"] = distance .. " studs",
                    ["inline"] = true
                },
                {
                    ["name"] = "Server ID",
                    ["value"] = jobId,
                    ["inline"] = true
                },
                {
                    ["name"] = "Join Arvion Hub",
                    ["value"] = "[Discord Server](https://discord.gg/5tt22yKFDR)",
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = "Arvion Hub Serverhopper â€¢ "..os.date("%X")
            }
        }}
    }

    pcall(function()
        (syn and syn.request or request)({
            Url = url,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(data)
        })
    end)
end

local function scanForSecrets()
    local foundSecrets = {}
    for _, obj in pairs(workspace:GetDescendants()) do
        for _, secret in pairs(secrets) do
            if obj.Name == secret then
                local rootPart = obj:FindFirstChild("HumanoidRootPart") or obj.PrimaryPart
                if rootPart then
                    local isNearMyBase = myBase and (rootPart.Position - myBase.DeliveryHitbox.Position).Magnitude <= EXCLUSION_RADIUS
                    if not isNearMyBase then
                        table.insert(foundSecrets, {
                            name = secret,
                            position = rootPart.Position
                        })
                    end
                end
            end
        end
    end
    return foundSecrets
end

local function hopToNewServer()
    local servers = {}
    local success, data = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100"
        ))
    end)
    
    if success and data then
        for _, server in ipairs(data.data) do
            if server.id ~= jobId and server.playing < MAX_PLAYERS_FOR_TP then
                table.insert(servers, server.id)
            end
        end
    end
    
    if #servers > 0 then
        local target = servers[math.random(#servers)]
        TeleportService:TeleportToPlaceInstance(placeId, target, lp)
        return true
    end
    return false
end

while true do
    local secretsFound = scanForSecrets()
    
    if #secretsFound > 0 then
        for _, secret in pairs(secretsFound) do
            sendToWebhook(webhook, secret.name, secret.position)
        end
        break
    else
        if not hopToNewServer() then
            task.wait(5)
        else
            task.wait(10)
        end
    end
end
